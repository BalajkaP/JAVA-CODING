awaitTermination(long timeout, TimeUnit unit)
Blocks until all tasks have completed execution after a shutdown request, or the timeout occurs, or the current thread is interrupted, whichever happens first.

invokeAll(Collection<? extends Callable<T>> tasks)
Executes the given tasks, returning a list of Futures holding their status and results when all complete.

invokeAll(Collection<? extends Callable<T>> tasks, long timeout, TimeUnit unit)
Executes the given tasks, returning a list of Futures holding their status and results when all complete or the timeout expires, whichever happens first.

invokeAny(Collection<? extends Callable<T>> tasks)
Executes the given tasks, returning the result of one that has completed successfully (i.e., without throwing an exception), if any do.

invokeAny(Collection<? extends Callable<T>> tasks, long timeout, TimeUnit unit)
Executes the given tasks, returning the result of one that has completed successfully (i.e., without throwing an exception), 
if any do before the given timeout elapses.

isShutdown()
Returns true if this executor has been shut down.

isTerminated()
Returns true if all tasks have completed following shut down.

shutdown()
Initiates an orderly shutdown in which previously submitted tasks are executed, but no new tasks will be accepted.

shutdownNow()
Attempts to stop all actively executing tasks, halts the processing of waiting tasks, and returns a list of the tasks that were awaiting execution.

submit(Callable<T> task)
Submits a value-returning task for execution and returns a Future representing the pending results of the task.

submit(Runnable task)
Submits a Runnable task for execution and returns a Future representing that task.

submit(Runnable task, T result)
Submits a Runnable task for execution and returns a Future representing that task.


Methods inherited from interface java.util.concurrent.Executor
execute
