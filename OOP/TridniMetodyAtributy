- spolecne pro vsechny instance dane tridy
- uvozujeme klicovym slovem static

public static int tridniAtribut;
public static void tridniMetoda(...) {...}

- pristupujeme:
Trida.tridniAtribut = ...;
Trida.tridniMetoda();

- atributum a metodam, ktere nejsou tridni, se rika instancni


public class Trida {

    static int a;           // tridni atribut - hodnota je spolecna pro vsechny instance
    int b;

    public Trida(int a, int b) {
        Trida.a = a;        // nastavujeme tridni atribut, pristupujeme Trida.a 
        this.b = b;
    }

    public void printStatus() {
        System.out.println("a = " +a+ " , b = " +b);
    }
}

public class Main {

    public static void main (String[] args) {
        Trida instance1 = new Trida(10, 10);
        instance1.printStatus();            // a = 10, b = 10
        Trida instance2 = new Trida(5, 5);
        instance2.printStatus();            // a = 5, b = 5
        instance1.printStatus();            // a = 5, b = 10    - atribut a je tridni a jeho hodnotu sdili vsechny instance, proto pri zmene hodnoty
                                                                a v konstruktoru instance2 zaroven menime i stav instance1 
                                                                (menime hodnotu spolecneho tridniho atributu)
    }
}


Typicke pouziti tridnich atributu:
1) pro hodnoty, ktere jsou spolecne pro vsechny instance
2) pokud chceme pouzivat hodnotu, ktera neni vazana ke konkretni instanci, nebo nechceme vubec vytvaret instance dane tridy 


-----------pr cislovani instanci-----------

public class Table {
    static int nextTableNo = 1;
    int tableNo;
    
    public Table() {
        tableNo = nextTableNo;
        nextTableNo++;
    }
    public int getTableNo() {
        return tableNo;
    }
}

public class Main {

    public static void main (String [] args) {
        Table table = new Table();
        Table [] tables = new Table[10];
        for (int i = 0; i < tables.length; i++) {
            tables[i] = new Table();
        }
        System.out.println(table.getTableNo());             // 1
        for (Table t : tables) {
            System.out.println(" " +t.getTableNo()+ ", ");  // 2, 3, 4, ..., 11
        }
    }
}





Typicke pouziti tridnich metod:
- pro popis kodu, ktery neni vztazeny k zadne konkretni instanci 

1) metoda main
    - spousti hlavni kod aplikace, nevyzaduje vytvoreni zadne instance 
2) trida Settings pro ulozeni konstant
    - pokud nepotrebujeme vytvaret vice variant nastaveni (vice instanci Settings)
3) tridy jako java.util.Math, ktere vlastne funguji jako knihvny funkci
4) metody zastupujici konstruktor tam, kde chceme omezit vytvareni instanci 


public class Main {

    public static void main (String [] args) {
        ....
    }
}

public class Settings {
    
    public static int maxUsers() {
        return 10;
    }
    if(numOfUsers > Settings.maxUsers()) {
        System.err.println("Prekrocen limit uzivatelu");
    }
    int number = 25;
    System.out.println(Math.sqrt(number));          // 5.0 - druha odmocnian cisla number 
    System.out.println(Math.min(number, 10));       // 10 - mensi z cisel number a 10
    System.out.println(Math.random());              // nahodne cislo z intervalu <0,1
}